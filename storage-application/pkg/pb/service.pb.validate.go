// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/pb/service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StorageUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageUserRequestMultiError, or nil if none found.
func (m *StorageUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Command

	// no validation rules for Value

	// no validation rules for Uptime

	if len(errors) > 0 {
		return StorageUserRequestMultiError(errors)
	}

	return nil
}

// StorageUserRequestMultiError is an error wrapping multiple validation errors
// returned by StorageUserRequest.ValidateAll() if the designated constraints
// aren't met.
type StorageUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageUserRequestMultiError) AllErrors() []error { return m }

// StorageUserRequestValidationError is the validation error returned by
// StorageUserRequest.Validate if the designated constraints aren't met.
type StorageUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageUserRequestValidationError) ErrorName() string {
	return "StorageUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageUserRequestValidationError{}

// Validate checks the field values on StorageUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageUserResponseMultiError, or nil if none found.
func (m *StorageUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return StorageUserResponseMultiError(errors)
	}

	return nil
}

// StorageUserResponseMultiError is an error wrapping multiple validation
// errors returned by StorageUserResponse.ValidateAll() if the designated
// constraints aren't met.
type StorageUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageUserResponseMultiError) AllErrors() []error { return m }

// StorageUserResponseValidationError is the validation error returned by
// StorageUserResponse.Validate if the designated constraints aren't met.
type StorageUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageUserResponseValidationError) ErrorName() string {
	return "StorageUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageUserResponseValidationError{}

// Validate checks the field values on CommandInfoUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommandInfoUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandInfoUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandInfoUserRequestMultiError, or nil if none found.
func (m *CommandInfoUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandInfoUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserrequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandInfoUserRequestValidationError{
					field:  "Userrequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandInfoUserRequestValidationError{
					field:  "Userrequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserrequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandInfoUserRequestValidationError{
				field:  "Userrequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandInfoUserRequestMultiError(errors)
	}

	return nil
}

// CommandInfoUserRequestMultiError is an error wrapping multiple validation
// errors returned by CommandInfoUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CommandInfoUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandInfoUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandInfoUserRequestMultiError) AllErrors() []error { return m }

// CommandInfoUserRequestValidationError is the validation error returned by
// CommandInfoUserRequest.Validate if the designated constraints aren't met.
type CommandInfoUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandInfoUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandInfoUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandInfoUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandInfoUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandInfoUserRequestValidationError) ErrorName() string {
	return "CommandInfoUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommandInfoUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandInfoUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandInfoUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandInfoUserRequestValidationError{}

// Validate checks the field values on CommandInfoUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommandInfoUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandInfoUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandInfoUserResponseMultiError, or nil if none found.
func (m *CommandInfoUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandInfoUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserresponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandInfoUserResponseValidationError{
					field:  "Userresponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandInfoUserResponseValidationError{
					field:  "Userresponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserresponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandInfoUserResponseValidationError{
				field:  "Userresponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandInfoUserResponseMultiError(errors)
	}

	return nil
}

// CommandInfoUserResponseMultiError is an error wrapping multiple validation
// errors returned by CommandInfoUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CommandInfoUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandInfoUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandInfoUserResponseMultiError) AllErrors() []error { return m }

// CommandInfoUserResponseValidationError is the validation error returned by
// CommandInfoUserResponse.Validate if the designated constraints aren't met.
type CommandInfoUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandInfoUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandInfoUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandInfoUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandInfoUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandInfoUserResponseValidationError) ErrorName() string {
	return "CommandInfoUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommandInfoUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandInfoUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandInfoUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandInfoUserResponseValidationError{}

// Validate checks the field values on CommandUptimeUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommandUptimeUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandUptimeUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandUptimeUserRequestMultiError, or nil if none found.
func (m *CommandUptimeUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandUptimeUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserrequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandUptimeUserRequestValidationError{
					field:  "Userrequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandUptimeUserRequestValidationError{
					field:  "Userrequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserrequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandUptimeUserRequestValidationError{
				field:  "Userrequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandUptimeUserRequestMultiError(errors)
	}

	return nil
}

// CommandUptimeUserRequestMultiError is an error wrapping multiple validation
// errors returned by CommandUptimeUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CommandUptimeUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandUptimeUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandUptimeUserRequestMultiError) AllErrors() []error { return m }

// CommandUptimeUserRequestValidationError is the validation error returned by
// CommandUptimeUserRequest.Validate if the designated constraints aren't met.
type CommandUptimeUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandUptimeUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandUptimeUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandUptimeUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandUptimeUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandUptimeUserRequestValidationError) ErrorName() string {
	return "CommandUptimeUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommandUptimeUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandUptimeUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandUptimeUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandUptimeUserRequestValidationError{}

// Validate checks the field values on CommandUptimeUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommandUptimeUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandUptimeUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandUptimeUserResponseMultiError, or nil if none found.
func (m *CommandUptimeUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandUptimeUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserresponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandUptimeUserResponseValidationError{
					field:  "Userresponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandUptimeUserResponseValidationError{
					field:  "Userresponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserresponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandUptimeUserResponseValidationError{
				field:  "Userresponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandUptimeUserResponseMultiError(errors)
	}

	return nil
}

// CommandUptimeUserResponseMultiError is an error wrapping multiple validation
// errors returned by CommandUptimeUserResponse.ValidateAll() if the
// designated constraints aren't met.
type CommandUptimeUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandUptimeUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandUptimeUserResponseMultiError) AllErrors() []error { return m }

// CommandUptimeUserResponseValidationError is the validation error returned by
// CommandUptimeUserResponse.Validate if the designated constraints aren't met.
type CommandUptimeUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandUptimeUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandUptimeUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandUptimeUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandUptimeUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandUptimeUserResponseValidationError) ErrorName() string {
	return "CommandUptimeUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommandUptimeUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandUptimeUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandUptimeUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandUptimeUserResponseValidationError{}

// Validate checks the field values on CommandResetUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommandResetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandResetUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandResetUserRequestMultiError, or nil if none found.
func (m *CommandResetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandResetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserrequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandResetUserRequestValidationError{
					field:  "Userrequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandResetUserRequestValidationError{
					field:  "Userrequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserrequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandResetUserRequestValidationError{
				field:  "Userrequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandResetUserRequestMultiError(errors)
	}

	return nil
}

// CommandResetUserRequestMultiError is an error wrapping multiple validation
// errors returned by CommandResetUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CommandResetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandResetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandResetUserRequestMultiError) AllErrors() []error { return m }

// CommandResetUserRequestValidationError is the validation error returned by
// CommandResetUserRequest.Validate if the designated constraints aren't met.
type CommandResetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandResetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandResetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandResetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandResetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandResetUserRequestValidationError) ErrorName() string {
	return "CommandResetUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommandResetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandResetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandResetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandResetUserRequestValidationError{}

// Validate checks the field values on CommandResetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommandResetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandResetUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandResetUserResponseMultiError, or nil if none found.
func (m *CommandResetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandResetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserresponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommandResetUserResponseValidationError{
					field:  "Userresponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommandResetUserResponseValidationError{
					field:  "Userresponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserresponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommandResetUserResponseValidationError{
				field:  "Userresponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommandResetUserResponseMultiError(errors)
	}

	return nil
}

// CommandResetUserResponseMultiError is an error wrapping multiple validation
// errors returned by CommandResetUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CommandResetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandResetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandResetUserResponseMultiError) AllErrors() []error { return m }

// CommandResetUserResponseValidationError is the validation error returned by
// CommandResetUserResponse.Validate if the designated constraints aren't met.
type CommandResetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandResetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandResetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandResetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandResetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandResetUserResponseValidationError) ErrorName() string {
	return "CommandResetUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommandResetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandResetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandResetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandResetUserResponseValidationError{}
