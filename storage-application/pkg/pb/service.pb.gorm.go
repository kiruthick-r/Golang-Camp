package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type StorageUserRequestORM struct {
	Command string
	Id      int64 `gorm:"type:uuid;primary_key"`
	Uptime  string
	Value   string
}

// TableName overrides the default tablename generated by GORM
func (StorageUserRequestORM) TableName() string {
	return "storage_user_requests"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *StorageUserRequest) ToORM(ctx context.Context) (StorageUserRequestORM, error) {
	to := StorageUserRequestORM{}
	var err error
	if prehook, ok := interface{}(m).(StorageUserRequestWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Command = m.Command
	to.Value = m.Value
	to.Uptime = m.Uptime
	if posthook, ok := interface{}(m).(StorageUserRequestWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StorageUserRequestORM) ToPB(ctx context.Context) (StorageUserRequest, error) {
	to := StorageUserRequest{}
	var err error
	if prehook, ok := interface{}(m).(StorageUserRequestWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Command = m.Command
	to.Value = m.Value
	to.Uptime = m.Uptime
	if posthook, ok := interface{}(m).(StorageUserRequestWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type StorageUserRequest the arg will be the target, the caller the one being converted from

// StorageUserRequestBeforeToORM called before default ToORM code
type StorageUserRequestWithBeforeToORM interface {
	BeforeToORM(context.Context, *StorageUserRequestORM) error
}

// StorageUserRequestAfterToORM called after default ToORM code
type StorageUserRequestWithAfterToORM interface {
	AfterToORM(context.Context, *StorageUserRequestORM) error
}

// StorageUserRequestBeforeToPB called before default ToPB code
type StorageUserRequestWithBeforeToPB interface {
	BeforeToPB(context.Context, *StorageUserRequest) error
}

// StorageUserRequestAfterToPB called after default ToPB code
type StorageUserRequestWithAfterToPB interface {
	AfterToPB(context.Context, *StorageUserRequest) error
}

type StorageUserResponseORM struct {
	Value string
}

// TableName overrides the default tablename generated by GORM
func (StorageUserResponseORM) TableName() string {
	return "storage_user_responses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *StorageUserResponse) ToORM(ctx context.Context) (StorageUserResponseORM, error) {
	to := StorageUserResponseORM{}
	var err error
	if prehook, ok := interface{}(m).(StorageUserResponseWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Value = m.Value
	if posthook, ok := interface{}(m).(StorageUserResponseWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StorageUserResponseORM) ToPB(ctx context.Context) (StorageUserResponse, error) {
	to := StorageUserResponse{}
	var err error
	if prehook, ok := interface{}(m).(StorageUserResponseWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Value = m.Value
	if posthook, ok := interface{}(m).(StorageUserResponseWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type StorageUserResponse the arg will be the target, the caller the one being converted from

// StorageUserResponseBeforeToORM called before default ToORM code
type StorageUserResponseWithBeforeToORM interface {
	BeforeToORM(context.Context, *StorageUserResponseORM) error
}

// StorageUserResponseAfterToORM called after default ToORM code
type StorageUserResponseWithAfterToORM interface {
	AfterToORM(context.Context, *StorageUserResponseORM) error
}

// StorageUserResponseBeforeToPB called before default ToPB code
type StorageUserResponseWithBeforeToPB interface {
	BeforeToPB(context.Context, *StorageUserResponse) error
}

// StorageUserResponseAfterToPB called after default ToPB code
type StorageUserResponseWithAfterToPB interface {
	AfterToPB(context.Context, *StorageUserResponse) error
}

// DefaultCreateStorageUserRequest executes a basic gorm create call
func DefaultCreateStorageUserRequest(ctx context.Context, in *StorageUserRequest, db *gorm.DB) (*StorageUserRequest, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StorageUserRequestORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStorageUserRequest(ctx context.Context, in *StorageUserRequest, db *gorm.DB) (*StorageUserRequest, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &StorageUserRequestORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StorageUserRequestORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StorageUserRequestORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StorageUserRequestORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageUserRequest(ctx context.Context, in *StorageUserRequest, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StorageUserRequestORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StorageUserRequestORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageUserRequestSet(ctx context.Context, in []*StorageUserRequest, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StorageUserRequestORM{})).(StorageUserRequestORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StorageUserRequestORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StorageUserRequestORM{})).(StorageUserRequestORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StorageUserRequestORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*StorageUserRequest, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*StorageUserRequest, *gorm.DB) error
}

// DefaultStrictUpdateStorageUserRequest clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStorageUserRequest(ctx context.Context, in *StorageUserRequest, db *gorm.DB) (*StorageUserRequest, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStorageUserRequest")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StorageUserRequestORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StorageUserRequestORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStorageUserRequest executes a basic gorm update call with patch behavior
func DefaultPatchStorageUserRequest(ctx context.Context, in *StorageUserRequest, updateMask *field_mask.FieldMask, db *gorm.DB) (*StorageUserRequest, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj StorageUserRequest
	var err error
	if hook, ok := interface{}(&pbObj).(StorageUserRequestWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStorageUserRequest(ctx, &StorageUserRequest{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StorageUserRequestWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStorageUserRequest(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StorageUserRequestWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStorageUserRequest(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StorageUserRequestWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StorageUserRequestWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *StorageUserRequest, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *StorageUserRequest, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *StorageUserRequest, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *StorageUserRequest, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStorageUserRequest executes a bulk gorm update call with patch behavior
func DefaultPatchSetStorageUserRequest(ctx context.Context, objects []*StorageUserRequest, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*StorageUserRequest, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*StorageUserRequest, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStorageUserRequest(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStorageUserRequest patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStorageUserRequest(ctx context.Context, patchee *StorageUserRequest, patcher *StorageUserRequest, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*StorageUserRequest, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Command" {
			patchee.Command = patcher.Command
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
		if f == prefix+"Uptime" {
			patchee.Uptime = patcher.Uptime
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStorageUserRequest executes a gorm list call
func DefaultListStorageUserRequest(ctx context.Context, db *gorm.DB) ([]*StorageUserRequest, error) {
	in := StorageUserRequest{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &StorageUserRequestORM{}, &StorageUserRequest{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StorageUserRequestORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserRequestORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*StorageUserRequest{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StorageUserRequestORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserRequestORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StorageUserRequestORM) error
}

// DefaultCreateStorageUserResponse executes a basic gorm create call
func DefaultCreateStorageUserResponse(ctx context.Context, in *StorageUserResponse, db *gorm.DB) (*StorageUserResponse, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserResponseORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserResponseORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StorageUserResponseORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserResponseORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskStorageUserResponse patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStorageUserResponse(ctx context.Context, patchee *StorageUserResponse, patcher *StorageUserResponse, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*StorageUserResponse, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStorageUserResponse executes a gorm list call
func DefaultListStorageUserResponse(ctx context.Context, db *gorm.DB) ([]*StorageUserResponse, error) {
	in := StorageUserResponse{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserResponseORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &StorageUserResponseORM{}, &StorageUserResponse{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserResponseORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []StorageUserResponseORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageUserResponseORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*StorageUserResponse{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StorageUserResponseORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserResponseORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageUserResponseORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StorageUserResponseORM) error
}
