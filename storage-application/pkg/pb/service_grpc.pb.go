// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pkg/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	CommandInfo(ctx context.Context, in *CommandInfoUserRequest, opts ...grpc.CallOption) (*CommandInfoUserResponse, error)
	CommandUptime(ctx context.Context, in *CommandUptimeUserRequest, opts ...grpc.CallOption) (*CommandUptimeUserResponse, error)
	CommandReset(ctx context.Context, in *CommandResetUserRequest, opts ...grpc.CallOption) (*CommandResetUserResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) CommandInfo(ctx context.Context, in *CommandInfoUserRequest, opts ...grpc.CallOption) (*CommandInfoUserResponse, error) {
	out := new(CommandInfoUserResponse)
	err := c.cc.Invoke(ctx, "/storageapplication.StorageService/CommandInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CommandUptime(ctx context.Context, in *CommandUptimeUserRequest, opts ...grpc.CallOption) (*CommandUptimeUserResponse, error) {
	out := new(CommandUptimeUserResponse)
	err := c.cc.Invoke(ctx, "/storageapplication.StorageService/CommandUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CommandReset(ctx context.Context, in *CommandResetUserRequest, opts ...grpc.CallOption) (*CommandResetUserResponse, error) {
	out := new(CommandResetUserResponse)
	err := c.cc.Invoke(ctx, "/storageapplication.StorageService/CommandReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	CommandInfo(context.Context, *CommandInfoUserRequest) (*CommandInfoUserResponse, error)
	CommandUptime(context.Context, *CommandUptimeUserRequest) (*CommandUptimeUserResponse, error)
	CommandReset(context.Context, *CommandResetUserRequest) (*CommandResetUserResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) CommandInfo(context.Context, *CommandInfoUserRequest) (*CommandInfoUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandInfo not implemented")
}
func (UnimplementedStorageServiceServer) CommandUptime(context.Context, *CommandUptimeUserRequest) (*CommandUptimeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUptime not implemented")
}
func (UnimplementedStorageServiceServer) CommandReset(context.Context, *CommandResetUserRequest) (*CommandResetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandReset not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_CommandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandInfoUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CommandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageapplication.StorageService/CommandInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CommandInfo(ctx, req.(*CommandInfoUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CommandUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUptimeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CommandUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageapplication.StorageService/CommandUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CommandUptime(ctx, req.(*CommandUptimeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CommandReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandResetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CommandReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageapplication.StorageService/CommandReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CommandReset(ctx, req.(*CommandResetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storageapplication.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandInfo",
			Handler:    _StorageService_CommandInfo_Handler,
		},
		{
			MethodName: "CommandUptime",
			Handler:    _StorageService_CommandUptime_Handler,
		},
		{
			MethodName: "CommandReset",
			Handler:    _StorageService_CommandReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/service.proto",
}
